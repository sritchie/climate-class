(ns climate.problems.chains
  (:use cascalog.api
        cascalog.playground))

;; ## The Kevin Bacon Challenge:
;;
;; Write a dynamically generated query that produces "chains" within
;; the playground's follows dataset. The follows dataset is,
;; essentially, a set of chains of length two. Taking the following
;; dataset as an example:

(def example-src
  [["alice" "john"]
   ["john" "carrie"]])

(defn square-equals-self [equal-val]
  (construct ["?n"]
             [[integer "?n"]
              [#'* "?n" "?n" :> equal-val]]))

(require '[cascalog.vars :as v])
;; in ns header: (:require [cascalog.vars :as v])
(v/gen-nullable-vars 2)

(defn chain-query [query n]
  )

(def two-chains
  (let [vars (v/gen-nullable-vars 2)]
    (construct vars
               [[follows :>> vars]])))

(compose func-2 func-1)
(<- [?a :> ?c]
    (func-1 ?a :> ?b)
    (func-2 ?b :> ?c))

(compose other-predicate-macro
         #'inc
         predicate-macro)


(let [op (<- [?a :> ?d]
             (func-1 ?a :> ?b)
             (func-2 ?b :> ?c)
             (func-3 ?c :> ?d))]
  (<- [?x ?y]
      (src ?x)
      (func-1 ?x :> ?anon1)
      (func-2 ?anon1 :> ?anon2)
      (func-3 :<< ["?anon2"] :>> ["?y"])))

(op ?a :> ?b) ;; relates to...

(<- [?a :> ?b]
    (src ?a ?b ?c)
    (func-1 ?a ?b ?c :> ?inter)
    (func-2 ?inter :> ?inter2)
    (func-3 ?inter2 :> ?inter3))

(op :<< ["?a" "?b" "?c" "?d"] :>> ["?b"])

(<- [:<< ?a :>> ?b]
    (some-op :<< ?a :> ?intermediate)
    (other-op ?intermediate :>> ?b))

(defmapop operation*
  {:params [conf-map]}
  [field1 field2]
  )

((operation* {1 2, 3 4}) ?field)

(defn operation* [param]
  (fn [field1 field2]
    ,,,,))

(defn operation [param]
  (<- [:<< ?input :>> ?output]
      ((operation* param) :<< ?input :>> ?output)))

(let [op ]
  (<- []
      ((operation conf-map 2 1) ?x ?y ?z :> ?a ?beta)))


(defn compose [& op-seq]
  (let [vars (v/gen-nullable-vars (inc (count op-seq)))]
    (construct [(first vars) :> (last vars)]
               (map (fn [op [in out]]
                      [op in :> out]) ;; predicate template
                    (reverse op-seq)
                    (partition 2 1 vars)))))

(def four-chains
  (let [vars (v/gen-nullable-vars 4)]
    (construct ["?person-a" "?person-b" "?person-c" "?person-d"] ;; vars
               [[follows :>> ["?person-a" "?person-b"]]
                            [follows :>> ["?person-b" "?person-c"]]
                                        [follows :>> ["?person-c" "?person-d"]]])))

;; The only chain of length three would be

["alice" "john" "carrie"]

;; Since alice follows john, who follows carrie.
;;
;; "construct" is your friend, here.
